# .zshrc
#-----------------------------------------------------------------------------

# Configure plugins and themes
ZSH="$HOME/.oh-my-zsh"
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern cursor root line)
ZSH_THEME="../../.pretty-terminal/pretty" # Note: Path is relative to .oh-my-zsh/themes directory
plugins=(brew git zsh-autosuggestions zsh-syntax-highlighting docker docker-compose)
source $ZSH/oh-my-zsh.sh

# Using less colorful zsh_highlights:
# https://blog.patshead.com/2012/01/using-and-customizing-zsh-syntax-highlighting-with-oh-my-zsh.html
ZSH_HIGHLIGHT_STYLES[default]=none
ZSH_HIGHLIGHT_STYLES[unknown-token]=fg=red
ZSH_HIGHLIGHT_STYLES[reserved-word]=fg=yellow
ZSH_HIGHLIGHT_STYLES[alias]=none
ZSH_HIGHLIGHT_STYLES[builtin]=none
ZSH_HIGHLIGHT_STYLES[function]=none
ZSH_HIGHLIGHT_STYLES[command]=none
ZSH_HIGHLIGHT_STYLES[precommand]=none
ZSH_HIGHLIGHT_STYLES[commandseparator]=none
ZSH_HIGHLIGHT_STYLES[hashed-command]=none
ZSH_HIGHLIGHT_STYLES[path]=none
ZSH_HIGHLIGHT_STYLES[globbing]=none
ZSH_HIGHLIGHT_STYLES[history-expansion]=fg=blue
ZSH_HIGHLIGHT_STYLES[single-hyphen-option]=none
ZSH_HIGHLIGHT_STYLES[double-hyphen-option]=none
ZSH_HIGHLIGHT_STYLES[back-quoted-argument]=none
ZSH_HIGHLIGHT_STYLES[single-quoted-argument]=fg=green
ZSH_HIGHLIGHT_STYLES[double-quoted-argument]=fg=green
ZSH_HIGHLIGHT_STYLES[dollar-double-quoted-argument]=fg=cyan
ZSH_HIGHLIGHT_STYLES[back-double-quoted-argument]=fg=cyan
ZSH_HIGHLIGHT_STYLES[assign]=none

function pretty1() {
  echo ""
  echo "    _  _     "
  echo "   ( \/ )    "
  echo "    \ ♡/   $1"
  echo "     \/      "
  echo ""
}

function pretty1_long() {
  echo ""
  echo "    _  _     "
  echo "   ( \/ )    "
  echo "    \ ♡/     "
  echo "     \/      "
  echo ""
  echo "$1"
  echo ""
}

function pretty2() {
  echo ""
  echo "   (\/)"
  echo "    \/   $1"
  echo ""
}

function pretty3() {
  echo ""
  echo ""
  echo "              "
  echo "   _    _     "
  echo "  (  \/  )    "
  echo "   \   ♡/   $1"
  echo "    \`\/'     "
  echo ""
}

function pretty4() {
  echo ""
  echo ""
  echo "    xoxoxo   xoxoxo    "
  echo "   xoxoxoxo xoxoxoxo   "
  echo "   oxoxoxoxoxoxoxoxo   "
  echo "    oxoxoxoxoxoxoxo    "
  echo "     oxoxoxoxoxoxo     "
  echo "       xoxoxoxox       "
  echo "         oxoxo         "
  echo "           o           "
  echo ""
}

# Selects a random message from the file `.pretty-terminal/pretty-messages.md`
function pretty() {
  local message=$(gshuf -n 1 ~/.pretty-terminal/pretty-messages.md)
  # echo $message
  local message_length=${#message}
  # echo $message_length
  if [ $message_length -lt 45 ]; then
    pretty1 "$message"
  else
    pretty1_long "$message"
  fi
}
function pretty_message1() {
  pretty1 "$(gshuf -n 1 ~/.pretty-terminal/pretty-messages.md)"
}
function pretty_message2() {
  pretty2 "$(gshuf -n 1 ~/.pretty-terminal/pretty-messages.md)"
}
function pretty_message3() {
  pretty3 "$(gshuf -n 1 ~/.pretty-terminal/pretty-messages.md)"
}
function pretty_message4() {
  pretty3 "$(gshuf -n 1 ~/.pretty-terminal/pretty-messages.md)"
}

pretty

# OS Detection
#-----------------------------------------------------------------------------
# Supported arguments: "windows", "osx", "linux"

function is_os {
  if [ -z "$OS" ]; then
    OS=$(uname -s)
    [ "$?" -eq 0 ] || return 0
  fi
  if [ $1 = "windows" ] && [ "$OS" = "Windows_NT" ]; then
    return 0
  elif [ $1 = "linux" ] && [ "$OS" = "Linux" ]; then
      return 0
  elif [ $1 = "mac" ] && [ "$OS" = "Darwin" ]; then
    return 0
  fi
  return 1
}

# Define Paths by Operating System
#-----------------------------------------------------------------------------

# Print operating system

# Bind for Windows
if is_os "windows"; then
  export USER=$USERNAME                 # OSX already has this
  export PATH=$PATH
  export PATH=~/bin:$PATH
  export PATH=~/bin/windows:$PATH
  export EDITOR="emacs"

# Bind for OSX
elif is_os "mac"; then
  # Brew requires /usr/local/bin and /usr/local/sbin to be ahead of /usr/bin
  export PATH=/usr/local/bin:$PATH
  export PATH=/usr/local/sbin:$PATH
  export CPLUS_INCLUDE_PATH="$CPLUS_INCLUDE_PATH:/usr/local/include"

  # Path for node
  export NODE_PATH=/usr/local/lib/node_modules

  # Path for npm
  export PATH=/usr/local/share/npm/bin:$PATH

  export PATH=~/bin:$PATH

  export EDITOR="pico -w"

  if [ -d $HOME/.rbenv ]; then
    export PATH="$HOME/.rbenv/bin:$PATH"
    eval "$(rbenv init -)"
  fi


# Bind for Linux
elif is_os "linux"; then
  export PATH="${HOME}/bin:${HOME}/.local/bin:$PATH"

  export MANPATH="${HOME}/share/man:${HOME}/.local/share/man:$MANPATH"
  export EDITOR="emacs"

  export NODE_PATH="#{HOME}/.node_modules"
fi

# Bind for osx and linux
if is_os "mac" || is_os "linux"; then
  # Path for ansible
  export ANSIBLE_HOSTS="${HOME}/.ansible_hosts"
  export ANSIBLE_TRANSPORT="ssh"
fi

# Prompt
#-----------------------------------------------------------------------------

# Disable virtualenv prompt
export VIRTUAL_ENV_DISABLE_PROMPT=1

export LANG=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8

function git_branch {
   (echo -n "*"; git branch 2> /dev/null | sed -e '/^[^*]/d') | sed -e 's/\*\* \(.*\)/*\1/'
}

function define_colors {
  local N=30
  local COLOR
  for COLOR in BLACK RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
    export COLOR_${COLOR}="\033[0;${N}m"
    export COLOR_${COLOR}_LIGHT="\033[1;${N}m"
    export PROMPT_COLOR_${COLOR}="\[\033[0;${N}m\]"
    export PROMPT_COLOR_${COLOR}_LIGHT="\[\033[1;${N}m\]"
    N=$(($N + 1))
  done

  COLOR_NONE="\033[0m"
  COLOR_COMMENT=$COLOR_BLACK
  PROMPT_COLOR_NONE="\[${COLOR_NONE}\]"
  PROMPT_COLOR_GIT=$PROMPT_COLOR_GREEN
  PROMPT_COLOR_USER=$PROMPT_COLOR_CYAN
  PROMPT_COLOR_HOST=$PROMPT_COLOR_CYAN
  PROMPT_COLOR_PATH=$PROMPT_COLOR_YELLOW
  PROMPT_COLOR_HISTORY=$PROMPT_COLOR_RED
  PROMPT_COLOR_TIME=$PROMPT_COLOR_MAGENTA

  # TODO: Extend bold, underline to all colors
  COLOR_BOLD="\033[1m"
  PROMPT_COLOR_BOLD="\[${COLOR_BOLD}\]"

  COLOR_UNDERLINE="\033[4m"
  PROMPT_COLOR_UNDERLINE="\[${COLOR_UNDERLINE}\]"
}

define_colors

alias print_colors="define_colors; echo -e \"${COLOR_NONE}COLOR_NONE\";echo -e \"${COLOR_WHITE}COLOR_WHITE\t${COLOR_WHITE_LIGHT}COLOR_WHITE_LIGHT\";echo -e \"${COLOR_BLUE}COLOR_BLUE\t${COLOR_BLUE_LIGHT}COLOR_BLUE_LIGHT\";echo -e \"${COLOR_GREEN}COLOR_GREEN\t${COLOR_GREEN_LIGHT}COLOR_GREEN_LIGHT\";echo -e \"${COLOR_CYAN}COLOR_CYAN\t${COLOR_CYAN_LIGHT}COLOR_LIGHT_CYAN\";echo -e \"${COLOR_RED}COLOR_RED\t${COLOR_RED_LIGHT}COLOR_RED_LIGHT\";echo -e \"${COLOR_MAGENTA}COLOR_MAGENTA\t${COLOR_MAGENTA_LIGHT}COLOR_MAGENTA_LIGHT\";echo -e \"${COLOR_YELLOW}COLOR_YELLOW\t${COLOR_YELLOW_LIGHT}COLOR_YELLOW_LIGHT\";echo -e \"${COLOR_BLACK}COLOR_BLACK\t${COLOR_BLACK_LIGHT}COLOR_BLACK_LIGHT\""


# Colors
# ----------------------------------------------------------------------------

  function light { }
  function dark { }

  function black { dark; osascript -e "tell application \"Terminal\" to set background color of front window to {0, 0, 0}"; }
  function red { dark; osascript -e "tell application \"Terminal\" to set background color of front window to {6885, 0, 765}"; }
  function green { dark; osascript -e "tell application \"Terminal\" to set background color of front window to {3060, 6630, 3570}"; }
  function purple { dark; osascript -e "tell application \"Terminal\" to set background color of front window to {5100, 3060, 7395}"; }
  function cyan { dark; osascript -e "tell application \"Terminal\" to set background color of front window to {0, 7140, 7395}"; }
  function orange { dark; osascript -e "tell application \"Terminal\" to set background color of front window to {7650, 4080, 255}"; }
  function blue { dark; osascript -e "tell application \"Terminal\" to set background color of front window to {765, 0, 6885}"; }
  function yellow { dark; osascript -e "tell application \"Terminal\" to set background color of front window to {7650, 7650, 0}"; }
  function terminal_tab { osascript -e 'tell application "Terminal" to activate' \
    -e 'tell application "System Events" to tell process "Terminal" to keystroke "t" using command down' \
    -e 'tell application "Terminal" to do script "echo It begins." in selected tab of the front window' }

  # Run -- Echo your command as it is run
  function comment { echo -e "${COLOR_COMMENT}[$@]${COLOR_NONE}"; }
  function run { comment $@; $@; }
  function run_color { local C1=$1; local C2=$2; shift; shift; comment $@; $C1; $@; local ERR=$?; $C2; return $ERR}

  # Color terminal during run
  # function run_light { light; run $@; local E=$?; dark; return $E }
  function run_light { run_color light dark "$@" }
  function run_dark { run_color dark light "$@" }
  function run_red { run_color red dark "$@" }
  function run_green { run_color green dark "$@" }
  function run_purple { run_color purple dark "$@" }
  function run_yellow { run_color yellow dark "$@" }
  function run_orange { run_color orange dark "$@" }
  function run_cyan { run_color cyan dark "$@" }

# Aliases
#-----------------------------------------------------------------------------

if is_os "mac"; then

  function run { comment $@; $@; }
  function run_color { local C1=$1; local C2=$2; shift; shift; comment $@; $C1; $@; local ERR=$?; $C2; return $ERR}

  # Color terminal during run
  # function run_light { light; run $@; local E=$?; dark; return $E }
  function run_light { run_color light dark "$@" }
  function run_dark { run_color dark light "$@" }
  function run_red { run_color red dark "$@" }
  function run_green { run_color green dark "$@" }
  function run_purple { run_color purple dark "$@" }
  function run_yellow { run_color yellow dark "$@" }
  function run_orange { run_color orange dark "$@" }
  function run_cyan { run_color cyan dark "$@" }

  # Random
  function random { openssl rand -hex 8 | pbcopy; echo "Copy successful."}

  # Beep
  function beep { echo -n ''; }

  # Growl
  function growl { growlnotify -m $@; }
  function grun { $@; growlnotify -t "Completed" -m "$@"; }
  function grun_light { light; grun $@; dark; }
  function grun_dark { dark; grun $@; light; }
  function grun_red { red; grun $@; dark; }
  function grun_green { green; grun $@; dark; }
  function grun_purple { purple; grun $@; dark; }
  function grun_cyan { cyan; grun $@; dark; }
  function grun_orange { orange; grun $@; dark; }
  function grun_yellow { yellow; grun $@; dark; }

  alias xcode="open -a XCode $@"

else

  function beep { echo -n ''; }
  function run { $@; }
  function run_light { $@; }
  function run_dark { $@; }
  function run_red { $@; }
  function run_green { $@; }
  function run_purple { $@; }
  function run_yellow { $@; }
  function run_orange { $@; }
  function run_cyan { $@; }
  function growl { $@; }
  function grun_light { $@; }
  function grun_red { $@; }
  function grun_green { $@; }
  function grun_purple { $@; }
  function grun_cyan { $@; }
  function grun_orange { $@; }
  function grun_yellow { $@; }

fi

# Config Aliases
#-----------------------------------------------------------------------------

alias edit_pretty="${EDITOR} ~/.zshrc/ ~/.gitconfig"

#-----------------------------------------------------------------------------
# ls colors
#-----------------------------------------------------------------------------
export CLICOLOR=1
# export LSCOLORS=
export LSCOLORS=Exgxcxdxbxahxfxbxdxcgc
export LS_OPTIONS='--color=auto'
export LS_COLORS="no=00;38;5;244:rs=0:di=00;38;5;33:ln=01;38;5;37:mh=00:pi=48;5;230;38;5;136;01:so=48;5;230;38;5;136;01:do=48;5;230;38;5;136;01:bd=48;5;230;38;5;244;01:cd=48;5;230;38;5;244;01:or=48;5;235;38;5;160:su=48;5;160;38;5;230:sg=48;5;136;38;5;230:ca=30;41:tw=48;5;64;38;5;230:ow=48;5;235;38;5;33:st=48;5;33;38;5;230:ex=01;38;5;64:*.tar=00;38;5;61:*.tgz=01;38;5;61:*.arj=01;38;5;61:*.taz=01;38;5;61:*.lzh=01;38;5;61:*.lzma=01;38;5;61:*.tlz=01;38;5;61:*.txz=01;38;5;61:*.zip=01;38;5;61:*.z=01;38;5;61:*.Z=01;38;5;61:*.dz=01;38;5;61:*.gz=01;38;5;61:*.lz=01;38;5;61:*.xz=01;38;5;61:*.bz2=01;38;5;61:*.bz=01;38;5;61:*.tbz=01;38;5;61:*.tbz2=01;38;5;61:*.tz=01;38;5;61:*.deb=01;38;5;61:*.rpm=01;38;5;61:*.jar=01;38;5;61:*.rar=01;38;5;61:*.ace=01;38;5;61:*.zoo=01;38;5;61:*.cpio=01;38;5;61:*.7z=01;38;5;61:*.rz=01;38;5;61:*.apk=01;38;5;61:*.gem=01;38;5;61:*.jpg=00;38;5;136:*.JPG=00;38;5;136:*.jpeg=00;38;5;136:*.gif=00;38;5;136:*.bmp=00;38;5;136:*.pbm=00;38;5;136:*.pgm=00;38;5;136:*.ppm=00;38;5;136:*.tga=00;38;5;136:*.xbm=00;38;5;136:*.xpm=00;38;5;136:*.tif=00;38;5;136:*.tiff=00;38;5;136:*.png=00;38;5;136:*.svg=00;38;5;136:*.svgz=00;38;5;136:*.mng=00;38;5;136:*.pcx=00;38;5;136:*.dl=00;38;5;136:*.xcf=00;38;5;136:*.xwd=00;38;5;136:*.yuv=00;38;5;136:*.cgm=00;38;5;136:*.emf=00;38;5;136:*.eps=00;38;5;136:*.CR2=00;38;5;136:*.ico=00;38;5;136:*.tex=01;38;5;245:*.rdf=01;38;5;245:*.owl=01;38;5;245:*.n3=01;38;5;245:*.ttl=01;38;5;245:*.nt=01;38;5;245:*.torrent=01;38;5;245:*.xml=01;38;5;245:*Makefile=01;38;5;245:*Rakefile=01;38;5;245:*build.xml=01;38;5;245:*rc=01;38;5;245:*1=01;38;5;245:*.nfo=01;38;5;245:*README=01;38;5;245:*README.txt=01;38;5;245:*readme.txt=01;38;5;245:*.md=01;38;5;245:*README.markdown=01;38;5;245:*.ini=01;38;5;245:*.yml=01;38;5;245:*.cfg=01;38;5;245:*.conf=01;38;5;245:*.c=01;38;5;245:*.cpp=01;38;5;245:*.cc=01;38;5;245:*.log=00;38;5;240:*.bak=00;38;5;240:*.aux=00;38;5;240:*.lof=00;38;5;240:*.lol=00;38;5;240:*.lot=00;38;5;240:*.out=00;38;5;240:*.toc=00;38;5;240:*.bbl=00;38;5;240:*.blg=00;38;5;240:*~=00;38;5;240:*#=00;38;5;240:*.part=00;38;5;240:*.incomplete=00;38;5;240:*.swp=00;38;5;240:*.tmp=00;38;5;240:*.temp=00;38;5;240:*.o=00;38;5;240:*.pyc=00;38;5;240:*.class=00;38;5;240:*.cache=00;38;5;240:*.aac=00;38;5;166:*.au=00;38;5;166:*.flac=00;38;5;166:*.mid=00;38;5;166:*.midi=00;38;5;166:*.mka=00;38;5;166:*.mp3=00;38;5;166:*.mpc=00;38;5;166:*.ogg=00;38;5;166:*.ra=00;38;5;166:*.wav=00;38;5;166:*.m4a=00;38;5;166:*.axa=00;38;5;166:*.oga=00;38;5;166:*.spx=00;38;5;166:*.xspf=00;38;5;166:*.mov=01;38;5;166:*.mpg=01;38;5;166:*.mpeg=01;38;5;166:*.m2v=01;38;5;166:*.mkv=01;38;5;166:*.ogm=01;38;5;166:*.mp4=01;38;5;166:*.m4v=01;38;5;166:*.mp4v=01;38;5;166:*.vob=01;38;5;166:*.qt=01;38;5;166:*.nuv=01;38;5;166:*.wmv=01;38;5;166:*.asf=01;38;5;166:*.rm=01;38;5;166:*.rmvb=01;38;5;166:*.flc=01;38;5;166:*.avi=01;38;5;166:*.fli=01;38;5;166:*.flv=01;38;5;166:*.gl=01;38;5;166:*.m2ts=01;38;5;166:*.divx=01;38;5;166:*.webm=01;38;5;166:*.axv=01;38;5;166:*.anx=01;38;5;166:*.ogv=01;38;5;166:*.ogx=01;38;5;166:"

# between quotation marks is the tool output for LS_COLORS
# export LS_COLORS="di=31;41:ln=31;41:so=31;41:pi=31;41:ex=31;41:bd=31;41:cd=31;41:su=31;41:sg=31;41:tw=31;41:ow=31;41:"
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
[ "$TERM" = "xterm" ] && TERM="xterm-256color"

if is_os 'mac'; then
  eval `gdircolors ~/.dircolors`
  # TODO: Detect if gls exists before binding these
  alias ls='run gls --color -F $@'      # Compact view
  alias lh='run gls --color -AF $@'     # Compact view, showing hidden
  alias la='run gls --color -lhAF $@'   # Full view, showing hidden
elif is_os 'linux'; then
  eval `dircolors ~/.dircolors`
  alias ls='run ls --color -F $@'       # Compact view
  alias lh='run ls --color -AF $@'      # Compact view, showing hidden
  alias la='run ls --color -lhAF $@'    # Full view, showing hidden
fi

# Navigation Alaises
#-----------------------------------------------------------------------------

alias history_list='run history $@'
alias history_clear='run history -c'
alias history_grep='run history | grep -i $@'

alias s='cd ..'
alias utc='date -u "+UTC    %Y-%m-%d %H:%M:%S    %Y-%m-%d %r"'
alias pst='date "+PST    %Y-%m-%d %H:%M:%S    %Y-%m-%d %r"'
alias now='utc && pst'
alias de='cd ~/dev'

alias tm='cd "/tmp/Mason Software/$@"'
alias dm='cd "/tmp/Mason Software/Documents/$@"'
alias am='cd "/tmp/Mason Software/Podcast Mason/$@"'
alias pm='cd "/tmp/Mason Software/Podcast Mason/$@"'
alias m='cd ~/mason'
alias mc='cd ~/mason/content_service'
alias md='cd ~/mason/drive_service'
alias mg='cd ~/mason/mason_go_library'
alias mm='cd ~/mason/db_migrator'

alias diff='run git difftool --extcmd=/usr/bin/opendiff $@'
alias diffs='run git difftool --staged --extcmd=/usr/bin/opendiff $@'

# Run, change color, and echo
function ssh {
  run_red /usr/bin/ssh "$@"
}

# Processes Aliases
#-----------------------------------------------------------------------------

alias list_processes='ps aux $@'             # List running processes
alias find_processes='ps aux | grep -i $@'  # Case insensitive search
alias find_files_recursive='find . -type f | grep $@' # Find recursive with grep

# Advacned Git aliases
#-----------------------------------------------------------------------------

# Feature in zsh to ensure git gets exactly what you type instead of trying to glob file paths
alias git='noglob git'

# Git displaying
alias gs='run git status'

alias gls="git --no-pager log -n 10 --graph --pretty=format:'%C(cyan)%h%C(green) %an %C(yellow)%cr%C(reset): %s%C(reset)%C(magenta)%d%Creset' --abbrev-commit --date=relative"

alias gsh="git_show_last_commit"

alias gh="gls"

alias gll="git --no-pager log -n 30 --graph --pretty=format:'%C(cyan)%h%C(green) %an %C(yellow)%cr%C(reset): %s%C(reset)%C(magenta)%d%Creset' --abbrev-commit --date=relative"

alias gla="git lg"

alias glm="git --no-pager log -n 40 --graph --pretty=format:'%C(cyan)%h%C(green) %an %C(yellow)%cr%C(reset): %s%C(reset)%C(magenta)%d%Creset' --abbrev-commit --date=relative | grep 'Evan Moran'"

alias gg='echo -e "\n--------------------------------- Git Branch -----------------------------------\n";git branch;echo -e "\n--------------------------------- Git Status -----------------------------------\n";git status;echo -e "\n--------------------------------- Git Log --------------------------------------\n";git lg | head -n 12'

alias ggm='echo -e "\n--------------------------------- Git Branch -----------------------------------\n";git branch;echo -e "\n--------------------------------- Git Status -----------------------------------\n";git status;echo -e "\n--------------------------------- Git Log ------------------------------------- \n";git lg | grep Evan | head -n 12 '

# Git diffing
alias git_diff_unstaged='run git diff'
alias gd='git_diff_unstaged'
alias git_diff_staged='run git diff --staged'
alias gds='git_diff_staged'
alias gdc='git_diff_staged'

# Git core manipulation
alias git_pull_rebase='run git pull --rebase'
alias gpr='git_pull_rebase'

# Pull with recursive submodule update ("Gee-pers")
alias git_pull_rebase_with_submodule='run git pull --rebase && run git submodule update --init --recursive'
alias gprs='git_pull_rebase_with_submodule'

alias git_commit_work_in_progress="run git commit -m \"WIP\""
alias gwip="git_commit_work_in_progress"

alias git_rebase_top_commits='run git rebase -i HEAD~9'
alias grt='git_rebase_top_commits'

# To remember
alias git_monthly='git log --author evanmoran --format="%ci" | cut -f1-2 -d- | uniq -c | tail -r'
alias git_reset_head='run git reset -p HEAD'
alias git_deleted='run git ls-files -d'
alias git_show_last_commit='run git show HEAD'
alias git_restore_deleted='run git ls-files -d | xargs git checkout --'
alias git_undo_cherrypick='run git reset --merge ORIG_HEAD'
alias git_undo_last_commit='run git reset --soft HEAD~1'
alias git_undo_last_commit_and_lower='run git reset --keep HEAD~1'
alias git_undo_commit_hash='run git reset --soft $@'

alias git_remember_merge_changes='run git rerere'
alias git_list_remote_branches='run git br -r'
alias git_delete_remote_branch='echo "git push <remotename> --delete <branchname>"'
alias git_show_file_stats_between_branches='git '
alias git_pull_rebase_from_origin_master='run git fetch; run git rebase origin/master'


# npm completion
#-----------------------------------------------------------------------------

if type complete &>/dev/null; then
  _npm_completion () {
    local words cword
    if type _get_comp_words_by_ref &>/dev/null; then
      _get_comp_words_by_ref -n = -n @ -n : -w words -i cword
    else
      cword="$COMP_CWORD"
      words=("${COMP_WORDS[@]}")
    fi

    local si="$IFS"
    if ! IFS=$'\n' COMPREPLY=($(COMP_CWORD="$cword" \
                           COMP_LINE="$COMP_LINE" \
                           COMP_POINT="$COMP_POINT" \
                           npm completion -- "${words[@]}" \
                           2>/dev/null)); then
      local ret=$?
      IFS="$si"
      return $ret
    fi
    IFS="$si"
    if type __ltrim_colon_completions &>/dev/null; then
      __ltrim_colon_completions "${words[cword]}"
    fi
  }
  complete -o default -F _npm_completion npm
elif type compdef &>/dev/null; then
  _npm_completion() {
    local si=$IFS
    compadd -- $(COMP_CWORD=$((CURRENT-1)) \
                 COMP_LINE=$BUFFER \
                 COMP_POINT=0 \
                 npm completion -- "${words[@]}" \
                 2>/dev/null)
    IFS=$si
  }
  compdef _npm_completion npm
elif type compctl &>/dev/null; then
  _npm_completion () {
    local cword line point words si
    read -Ac words
    read -cn cword
    let cword-=1
    read -l line
    read -ln point
    si="$IFS"
    if ! IFS=$'\n' reply=($(COMP_CWORD="$cword" \
                       COMP_LINE="$line" \
                       COMP_POINT="$point" \
                       npm completion -- "${words[@]}" \
                       2>/dev/null)); then

      local ret=$?
      IFS="$si"
      return $ret
    fi
    IFS="$si"
  }
  compctl -K _npm_completion npm
fi
###-end-npm-completion-###
